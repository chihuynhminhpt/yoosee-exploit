const net = require("net");

const ipPattern = /\?ip\=(.+?)\&/;
const pattern = /, response="(.+?)"/;
const urlPattern = /(rtsp.+?:554)/;

let t2ss = {};

process.on("uncaughtException", function (error) {
  console.log(error);
});

let patch = (data, ip) => {
  data = data.replace(pattern, '');
  data = data.replace(ipPattern, '');
  data = data.replace(urlPattern, '$1/onvif1');
  
  if (!data.includes("application/sdp"))
    data = data.trim() + "\r\nAccept: application/sdp";

  if (!data.includes('Authorization'))
    data =
      data.trim() +
      '\r\nAuthorization: Digest username="admin", realm="HIipCamera"\r\n';

      
  if (data.includes('Session: ') && data.includes('track2'))
    data = data.replace(/Session: .+/, '');

  // if (data.includes('track1'))
  //   data = data.replace('track1', 'track2');
  // else
  //   data = data.replace('track2', 'track1');

  // if (data.includes('PLAY') && ip && t2ss[ip])
  //   data = data.replace(/Session: .+/, `Session: ${t2ss[ip]}`);

  return data;
}

let patchRes = (request, response, ip) => {
  // if (response.includes("Session: ") && request.includes("track2"))
  //   response = response.replace(/Session: .+/, "");

  // if (response.includes("Session: ") && request.includes("track2"))
  //   t2ss[ip] = /Session: (.+)/.exec(response)[1];

  return response;
}

let extractIP = data => {
  let matches = ipPattern.exec(data);

  if (matches) return matches[1];

  return null;
}

// Socket server nhận dữ liệu từ VLC
const server = net
  .createServer((socket) => {
    // Mỗi khi nhận được data
    socket.on("data", data => {
      let s = data.toString();

      // Tách lấy IP của cam
      let ip = extractIP(s);

      // Patch lại request body
      let patched = patch(s, ip);

      console.log('Patched:', patched);

      if (ip) {
        console.log("IP: ", ip);

        // Tạo socket connection tới cam để chuyển tiếp gói tin
        let client = net.createConnection(554, ip, () => {
          client.write(patched);
        });
        
        client.on("data", (data) => {
          // Patch lại response body
          let patchedClient = patchRes(patched, data.toString(), ip);

          console.log("Patched client:", patchedClient);

          // if (!data.includes('PLAY'))
          //   client.end();

          // Chuyển tiếp response tới VLC
          socket.write(patchedClient);
        });

        // Handle các event khác
        client.on("end", () => {
          console.log(`>>>>>>>>>>>> Disconnected from ${ip} <<<<<<<<<<<<<<<<<`);
        });

        client.on("error", (err) => {
          console.log(err);
          // socket.end('');
          client.destroy();
        });
      }
    });
  })
  .on("error", (err) => {
    console.log(err);
  });

// Mở server ở port 554 RTSP
server.listen(554, () => {
  console.log("Opened server on", server.address());
});