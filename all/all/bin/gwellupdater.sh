
#!/bin/sh
#
# gwellupdater.sh - Gwell IPC System common update script
#
# junshengzhang@gwell.cc, 2020-01-04
# Copyright (c) 2020 Gwelltimes Technology Co., Ltd. All Rights Reserved.
#
# Usage: gwellupdater.sh [[workpath] filename]
#        default: workpath=/tmp filename=upg.bin.enc

#function upg_end() {
#  #check weather need reboot system
#  if [ ! -f /tmp/do_not_reboot_after_update ]; then
#    echo -e "$1:  We need \e[1;31mreboot\e[0m."
#    reboot
#  else
#    echo -e "$1: Ready. (\e[35mno need reboot\e[0m)"
#  fi
#  
#  exit
#}

# exit ipc
# watchdog must be closed!
killall -q ipc
sleep 1


WORKPATH=/tmp
FILENAME=upg.bin.enc
case $# in
  0)
    #echo "work path and file name all use default"
    ;;
  1)
    if [ "-h" == "$1" ] || [ "--help" == "$1" ]; then
      echo "
  Usage:
    $0 [[workpath] filename]

    default: workpath=$WORKPATH filename=$FILENAME
"
      #upg_end "do nothing"  
      
	  if [ ! -f /tmp/do_not_reboot_after_update ]; then
        echo -e "$1:  We need \e[1;31mreboot\e[0m."
        reboot
      else
        echo -e "$1: Ready. (\e[35mno need reboot\e[0m)"
      fi
	  
    else
      FILENAME=$1
      #echo "only work path use default"
    fi
    ;;
  2)
    FILENAME=$2
    WORKPATH=$1
    if [ ! -d $WORKPATH ]; then
      #upg_end "work path(\"$WORKPATH\") not exist"
	    
      if [ ! -f /tmp/do_not_reboot_after_update ]; then
        echo -e "$1:  We need \e[1;31mreboot\e[0m."
        reboot
      else
        echo -e "$1: Ready. (\e[35mno need reboot\e[0m)"
      fi
    fi
    ;;
  *)
    #upg_end "error: too many parm($#) for $0"
	  
    if [ ! -f /tmp/do_not_reboot_after_update ]; then
      echo -e "$1:  We need \e[1;31mreboot\e[0m."
      reboot
    else
      echo -e "$1: Ready. (\e[35mno need reboot\e[0m)"
    fi
    ;;
esac

#change work path (usually with /tmp or /mnt/ramdisk)
cd $WORKPATH

export RSA_KEYPATH=/etc/keyrsa
echo $RSA_KEYPATH

#decryption (FILENAME usually with upg.bin.enc)
echo "Decrypting $FILENAME"
[ X"temp" != X${FILENAME:0:4} ] && RSA_DEC_O=-o
rsa_dec $RSA_DEC_O -v -f $FILENAME #1>/dev/null
if [ $? -ne 0 ]; then
  #amrplayer /res/sound/set_fail.amr
  #upg_end "rsa_dec error! Wrong platform???"  
  
  if [ ! -f /tmp/do_not_reboot_after_update ]; then
    echo -e "$1:  We need \e[1;31mreboot\e[0m."
    reboot
  else
    echo -e "$1: Ready. (\e[35mno need reboot\e[0m)"
  fi
fi

#split upg file
BOOT_FILE=bootupdater.sh
PAYLOAD_MD5=payload.md5
PAYLOAD_FILE=payload.bin

echo $FILENAME
length=${#FILENAME}
#echo $length

#the size of string ".enc" is 4 bytes
size=4
index=$(($length-$size))

echo $index
#echo ${FILENAME:$index:4}

#if [ X".enc" == X"${FILENAME:${#FILENAME}-4}" ]; then
if [ X".enc" == X"${FILENAME:$index:4}" ]; then
  DEC_FILE=${FILENAME:0:$index}
else
  DEC_FILE=${FILENAME}".dec"
fi

echo "Splitting $DEC_FILE to $BOOT_FILE and $PAYLOAD_FILE"
dd bs=4096 if=$DEC_FILE of=$BOOT_FILE count=1 #2>/dev/null
dd bs=4096 if=$DEC_FILE of=$PAYLOAD_MD5 count=1 skip=1 #2>/dev/null
dd bs=4096 if=$DEC_FILE of=$PAYLOAD_FILE skip=2 #2>/dev/null

#remove original file to free disk space
rm $DEC_FILE

echo "Verifying $PAYLOAD_FILE"
NEW_MD5=`md5sum $PAYLOAD_FILE`
OLD_MD5=`cat $PAYLOAD_MD5`
NEW_MD5=${NEW_MD5:0:32}
OLD_MD5=${OLD_MD5:0:32}
rm $PAYLOAD_MD5
if [ X$NEW_MD5 != X$OLD_MD5 ]; then
  rm $BOOT_FILE $PAYLOAD_FILE
  #amrplayer /res/sound/set_fail.amr
  
  #upg_end "MD5 error! expect [$OLD_MD5] but got [$NEW_MD5]"
  
  if [ ! -f /tmp/do_not_reboot_after_update ]; then
    echo -e "$1:  We need \e[1;31mreboot\e[0m."
    reboot
  else
    echo -e "$1: Ready. (\e[35mno need reboot\e[0m)"
  fi  
fi

#run new updater script
dos2unix $BOOT_FILE
chmod +x $BOOT_FILE
echo "Running $BOOT_FILE"
#amrplayer /res/sound/set_ok.amr
sh $BOOT_FILE $PAYLOAD_FILE

#remove file to free disk space
[ -f $BOOT_FILE ] && rm $BOOT_FILE
[ -f $PAYLOAD_FILE ] && rm $PAYLOAD_FILE

#Write all buffered blocks to disk
sync

#upg_end "Update success!"

if [ ! -f /tmp/do_not_reboot_after_update ]; then
  echo -e "$1:  We need \e[1;31mreboot\e[0m."
  reboot
else
  echo -e "$1: Ready. (\e[35mno need reboot\e[0m)"
fi

exit
